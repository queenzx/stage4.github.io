第四阶段 前端渐进式框架——Vue
第五天
一、路由      (day04--routerdemo)
    8) 路由之间参数的传递
        通过router-link标签中的to属性(声明式导航<router-link :to="...">)
        1) to="/about?aaa=1"  
            取参数:用query (this.$route.query.aaa)
        2) :to='{name:"路由名",params:{key:val}}'
            to: 通过v-bind绑定 (v-bind:to, :to)
            name: 路由配置时指定的name属性的值
            params: 传递的参数(是一个对象)
            取参数: params(this.$route.params.num)
    9) 路由对象
        表示当前激活的路由的基本信息,包括fullPath,params,path,query,name...
        注意路由不是不变的，每次路由切换成功后都会产生一个新的路由对象
        在组件中使用$route来获取路由信息
        $route.path
            类型: string
            字符串，对应当前路由的路径，总是解析为绝对路径，如 "/foo/bar"。
        $route.params
            类型: Object
            一个 key/value 对象，包含了动态片段和全匹配片段，如果没有路由参数，就是一个空对象。
        $route.query
            类型: Object
            一个 key/value 对象，表示 URL 查询参数。例如，对于路径 /foo?user=1，则有 $route.query.user == 1，如果没有查询参数，则是个空对象。
        $route.hash
            类型: string
            当前路由的 hash 值 (带 #) ，如果没有 hash 值，则为空字符串。
        $route.fullPath
            类型: string
            完成解析后的 URL，包含查询参数和 hash 的完整路径。
    
    10) 编程式导航(router.push(...))
        使用router-link标签进行路由的跳转,但是在业务逻辑代码中无法使用router-link标签,所以只能使用编程式导航
        使用编程式导航,需要结束router对象
        在组件内部,可以通过this.$router访问路由对象
        1.字符串
        router.push('home')

        2.对象
        router.push({ path: 'home' })

        3.命名的路由
        router.push({ name: 'user', params: { userId: '123' }})

        4.带查询参数，变成 /register?plan=private
        router.push({ path: 'register', query: { plan: 'private' }})
    
    11) 动态路由 (singer)
        配置路由时,如果遇到这种情况:
            根据不同的参数渲染不同的内容,但是用的是同一个组件,
        可以使用动态路由
        配置方式: 
                path:":id"
    
    12) 路由中的守卫函数
        1) router对象设置全局守卫函数,对所有路由都有效
            全局前置守卫: beforeEach(to, from, next) => {})
                        next需要调用一次
                        to: Route: 即将要进入的目标 路由对象
                        from: Route: 当前导航正要离开的路由
                        next: Function: 一定要调用该方法来 resolve 这个钩子。
            全局前置守卫: router.afterEach((to, from) => {})
        2) 路由独享守卫,配置在routes属性中某个路由里面,只对该路由有效
            beforeEnter
        3) 配置在某个组件中,对该组件有效
            beforeRouteEnter(没有this)
            beforeRouteUpdate
            beforeRouteLeave
    
    13) 路由的获取
        通过路由跳转到对应的组件,组件的内容肯定是通过请求获取的
            created当组件创建成功后调用获取数据的请求方法,获取数据后将数据赋值给某个变量,进而渲染到视图上
    
    14) 过渡动画 (app.vue)
        <router-view> 是基本的动态组件，所以我们可以用 <transition> 组件给它添加一些过渡效果：

        <transition>
        <router-view></router-view>
        </transition>

    15) router.go(n)
        这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似 window.history.go(n)。
        例子:
            // 在浏览器记录中前进一步，等同于 history.forward()
            router.go(1)

            // 后退一步记录，等同于 history.back()
            router.go(-1)

            // 前进 3 步记录
            router.go(3)

            // 如果 history 记录不够用，那就默默地失败呗
            router.go(-100)
            router.go(100)

    
    安装jquery模块(routerdemo文件夹)
    $ npm i jquery --save
    安装express模块(stage4)
    cnpm i express




